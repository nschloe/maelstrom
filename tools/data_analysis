#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import os
import time

import numpy as np
from dolfin import (MPI, Function, FunctionSpace, Mesh, TestFunction,
                    TimeSeriesHDF5, TrialFunction, assemble, dx, interactive,
                    parameters, plot)

#try:
#    import prettyplotlib as ppl
#    from prettyplotlib import plt as pp
#except:
#    from matplotlib import pyplot as pp
import matplotlib.pyplot as plt
from maelstrom import dft
from mpltools import style

style.use('ggplot')

parameters['linear_algebra_backend'] = 'uBLAS'



def plot_dft(t, theta, label=None):
    '''Compute the discrete Fourier transform of a time series theta between
    the times t0, t1. Assume that the values in theta are equally spaced.
    Return some sweet plots.
    '''
    # Plot the time step.
    delta_t = t[1:] - t[:-1]

    k = 0
    plot_time_step = False
    if plot_time_step:
        fig, axarr = plt.subplots(4, 1)
        axarr[k].plot(delta_t)
        #axarr[k].title('Time step')
        k += 1
    else:
        fig, axarr = plt.subplots(3, 1)

    # As of now, we cannot compute nonuniform Fourier series, so interpolate
    # to a uniform series.
    # Note that there are a number of nonuniform FFT libraries, notably
    #
    #     * http://www.cims.nyu.edu/cmcl/nufft/nufft.html
    #     * http://www-user.tu-chemnitz.de/~potts/nfft/
    #
    # and a Python front-end
    #
    #    * https://github.com/ghisvail/pyNFFT.
    #
    # TODO use one of those
    #
    n = len(t)
    t_uniform = np.linspace(t[0], t[-1], n)
    theta_interp = np.interp(t_uniform, t, theta)

    freqs, X_scaled = dft.uniform_dft(t[-1] - t[0], theta_interp)

    print('Lowest frequency:   %gHz (wave length:  %gs)'
          % (freqs[1], 1.0/freqs[1])
          )
    print('Highest frequency:  %gHz (wave length:  %gs)'
          % (freqs[-1], 1.0/freqs[-1])
          )
    print

    axarr[k].semilogy(freqs, X_scaled.real, '.', label='real')
    axarr[k].semilogy(freqs, X_scaled.imag, '.', label='imag')
    axarr[k].semilogy(freqs, abs(X_scaled), '.', label='abs')
    axarr[k].legend()
    axarr[k].set_xlabel('ordinary frequency')
    axarr[k].set_ylabel('amplitude')
    if label:
        axarr[k].set_title('Discrete Fourier transform %s' % str(label))
    else:
        axarr[k].set_title('Discrete Fourier transform')
    k += 1

    plot_ft_approximation = True
    if plot_ft_approximation:
        axarr[k].plot(t, theta)
        axarr[k].set_title('Original data')
        k += 1
        # Plot an low and high frequencies separately.
        min_freq = 1.0e-6
        max_freq = 0.5
        high_frequencies = np.zeros(len(t_uniform))
        low_frequencies = np.zeros(len(t_uniform))
        num_low_freqs = 0
        num_high_freqs = 0
        for i, freq in enumerate(freqs):
            alpha = \
                X_scaled[i] * np.exp(1j * 2*np.pi * freq * (t_uniform - t[0]))
            if freq > max_freq:
                high_frequencies += alpha.real
                num_high_freqs += 1
            elif freq > min_freq:
                low_frequencies += alpha.real
                num_low_freqs += 1

        axarr[k].plot(t_uniform, high_frequencies,
                      label=('high freqs (from %gHz, %d total) '
                             % (max_freq, num_high_freqs)
                             )
                      )
        axarr[k].plot(t_uniform, low_frequencies,
                      label=('low freqs (between %gHz and %gHz, %d total)'
                             % (min_freq, max_freq, num_low_freqs)
                             )
                      )
        axarr[k].legend()
        k += 1
    return


def _build_gramian_matrix_classical(Theta):
    n = len(Theta)
    G = np.empty((n, n))
    for i in range(n):
        print(i)
        G[i, i] = assemble(Theta[i] * Theta[i] * dx)
        for j in range(i+1, n):
            alpha = assemble(Theta[i] * Theta[j] * dx)
            G[i, j] = alpha
            G[j, i] = alpha.conjugate()
    return G


def _build_gramian_matrix(Theta):
    # Build mass matrix.
    Q = Theta[0].function_space()
    u = TrialFunction(Q)
    v = TestFunction(Q)
    M = assemble(u*v*dx)

    n = len(Theta)

    # Build list of M*Theta[i].
    MTheta = []
    for i in range(n):
        MTheta.append(Function(Q))
        M.mult(Theta[i].vector(), MTheta[i].vector())

    if parameters['linear_algebra_backend'] == 'uBLAS':
        # Here we use the fact that
        #
        #     G = A^H M A,
        #
        # where A is the column matrix of the vectors that are associated with
        # Theta, and M is the mass matrix. Once A and M*A are available, the
        # Gramian can be computed the by DGEMM (aka np.dot).
        #
        # Cast Theta and MTheta into NumPy arrays.
        A = np.empty((Theta[0].vector().size(), len(Theta)))
        for i, theta in enumerate(Theta):
            A[:, i] = Theta[i].vector().array()
        MA = np.empty((MTheta[0].vector().size(), len(Theta)))
        for i, theta in enumerate(Theta):
            MA[:, i] = MTheta[i].vector().array()
        G = np.dot(A.transpose().conjugate(), MA)
    else:
        # Compute all the inner products manually.
        G = np.empty((n, n))
        for i in range(n):
            print(i)
            G[i, i] = Theta[i].vector().inner(MTheta[i].vector())
            for j in range(i+1, n):
                alpha = Theta[i].vector().inner(MTheta[j].vector())
                G[i, j] = alpha
                G[j, i] = alpha.conjugate()
    return G


def _main():
    args = _parse_args()
    temperature_file = args.filename

    # Uselessly do something with MPI to work around bug
    # <https://bitbucket.org/fenics-project/dolfin/issue/237/timeserieshdf5-the-mpi_info_create>.
    from dolfin import UnitIntervalMesh
    UnitIntervalMesh(1)

    if not os.path.isfile(temperature_file):
        raise RuntimeError('No such file \'%s\'. Abort.'
                           % temperature_file
                           )
    print('Treating file %s...' % temperature_file)
    # Make sure to cut off the filename extension
    filename, extension = os.path.splitext(temperature_file)
    if extension:
        temperature_file = filename

    comm = MPI.comm_world
    tst = TimeSeriesHDF5(comm, temperature_file)

    # Read mesh.
    mesh_times = tst.mesh_times()
    mesh = Mesh()
    tst.retrieve(mesh, mesh_times[0])
    plot(mesh)
    interactive()

    ## Build function space P2+/P1.
    #V0 = FunctionSpace(mesh, 'CG', 2)
    #V1 = FunctionSpace(mesh, 'B', 3)
    #V = V0 + V1
    #W = MixedFunctionSpace([V, V, V])

    # Build function space P2.
    Q = FunctionSpace(mesh, 'CG', 2)

    # crucible domain
    control_points = [
        (0.005, 0.405),
        (0.010, 0.405),
        (0.015, 0.405),
        (0.020, 0.405),
        (0.025, 0.405),
        (0.030, 0.405),
        (0.045, 0.405),
        (0.060, 0.405),
        (0.075, 0.405)
        ]
    ## Peter's domain
    #control_points = [
    #    (0.005, 0.040),
    #    (0.010, 0.040),
    #    (0.015, 0.040),
    #    (0.020, 0.040),
    #    (0.025, 0.040),
    #    (0.030, 0.040),
    #    (0.035, 0.040),
    #    (0.040, 0.040),
    #    (0.045, 0.040),
    #    (0.050, 0.040),
    #    (0.055, 0.040),
    #    (0.060, 0.040),
    #    (0.065, 0.040),
    #    (0.070, 0.040),
    #    (0.075, 0.040)
    #    ]

    # Read states.
    times = tst.vector_times()
    # Filter out values.
    times = times[times > args.start_time]
    times = times[times < args.end_time]

    Theta = []
    T = np.empty((len(times), len(control_points)))
    for k, t in enumerate(times):
        print('time: %e' % t)
        theta = Function(Q)
        tst.retrieve(theta.vector(), t)
        if args.show_svd:
            # Store the state for SVD.
            Theta.append(theta)
        for l, control_point in enumerate(control_points):
            # Store the temperature value at control point.
            T[k, l] = theta(control_point)
            ## Plot the function.
            #plot(theta)
            #interactive()

    if args.show_temperatures:
        # Make sure the figure has transparent background.
        fig = plt.figure()
        #ax = plt.axes()
        fig.patch.set_alpha(0.0)
        for l, control_point in enumerate(control_points):
            # Plot the temperature data at control point over time.
            plt.plot(times, T[:, l], label=('(%g, %g)' % control_point))
        plt.legend()
        #ppl.legend(ax)
        plt.title('Temperature at control points')
        plt.xlabel('t [s]')
        plt.xlim(times[0], times[-1])
        plt.ylabel('temperature [K]')
        plt.show()

    if args.show_dft:
        # Discrete Fourier Transform.
        for k in range(T.shape[1]):
            plot_dft(times, T[:, k], label=control_points[k])
        plt.show()

    if args.show_svd:
        # Build Gramian matrix.
        #n = len(times)
        #Theta_select = [Theta[k] for k in range(n-300, n)]
        Theta_select = Theta
        N = len(Theta_select)
        print('Building Gramian matrix (%d x %d)...' % (N, N))
        start = time.time()
        A = _build_gramian_matrix(Theta_select)
        end = time.time()
        print('elapsed time: %gs' % (end - start))

        # SVD of the Gramian in theta.
        print('Solving SVD system (%d x %d)...' % (N, N))
        start = time.time()
        U, s, V = np.linalg.svd(A)
        end = time.time()
        print('elapsed time: %gs' % (end - start))

        fig = plt.figure()
        fig.patch.set_alpha(0.0)
        plt.semilogy(s, 'o')
        plt.show()
    return


def _parse_args():
    '''Parse input arguments.'''
    import argparse
    parser = argparse.ArgumentParser(description='Temperature data analysis.')
    parser.add_argument('filename',
                        help='Input data filename'
                        )
    parser.add_argument('--start-time', '-t0',
                        default=-np.inf,
                        help='starting time for analysis',
                        type=float
                        )
    parser.add_argument('--end-time', '-t1',
                        default=np.inf,
                        help='end time for analysis',
                        type=float
                        )

    parser.add_argument('--show-temperatures', '-t',
                        action='store_true',
                        help='Show temperature data at control points'
                        )
    parser.add_argument('--show-dft', '-d',
                        action='store_true',
                        help=('Show discrete Fourier transform '
                              'of temperature data')
                        )
    parser.add_argument('--show-svd', '-s',
                        action='store_true',
                        help=('Show singular values '
                              'of temperature data')
                        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
